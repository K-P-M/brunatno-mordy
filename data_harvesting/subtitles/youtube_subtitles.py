"""
File contains scripts to get non-autogenerated transcriptions of youtube videos.
"""
import json
import time

import pytubefix
from dataset_config import DatasetConfig
from pytubefix import Playlist, YouTube


class YoutubeCaptions:

    """
    Class has all needed tools to get and saves Youtube captions.
    """

    def __init__(self, url: str, is_playlist: bool):
        self.is_playlist = is_playlist
        self.url = url

    def __clear_captions(self, captions_object: pytubefix.captions.Caption) -> str:
        """
         Method cleans all no needed characters like.

        :param captions_object: pytubefix.captions.Caption.
        :return: str.
        """
        scrapped_data = captions_object.generate_srt_captions()
        lines = scrapped_data.split("\n")
        content_lines = [
            line.strip()
            for line in lines
            if not line.isdigit() and "-->" not in line and line.strip()
        ]

        full_text = " ".join(content_lines)
        return full_text

    def __add_to_config_database(self, video: YouTube) -> None:
        """
         Add movie in database jsonfile to administrate all movies that were transcripted/scrapped.

        :param video: Youtube.
        :return: None.
        """
        with open(DatasetConfig.ALL_SCRAPED_MOVIES, "a", encoding="utf-8") as f:
            json.dump(
                {"title": video.title, "url": video.watch_url}, fp=f, ensure_ascii=False
            )
            f.write("\n")

    def __is_movie_in_dataset(self, movie: YouTube, file: str) -> bool:
        """
        Check if is movie in dataset already.

        :param movie: Youtube.
        :param file : str.
        :return: None.
        """
        videos_json = []
        with open(file, "r", encoding="utf-8") as f:
            for line in f:
                vid = json.loads(line.strip())
                videos_json.append(vid)
            return any(vid["url"] == movie.watch_url for vid in videos_json)

    def __save_video(self, video: YouTube, text: str) -> None:
        """
        Save video into jsonfile.

        :param video:.
        :param text:.
        :return: None:.
        """
        with open(DatasetConfig.NON_GENERATED, "a", encoding="utf-8") as f:
            json.dump(
                {
                    "title": video.title,
                    "url": video.watch_url,
                    "recording_length": video.length,
                    "transcription": text,
                },
                f,
                ensure_ascii=False,
            )
            f.write("\n")

    def __scrap_captions(self, video: YouTube) -> None:
        """
        Administrate of getting captions process.
        :param video: Youtube video.
        :return: None.
        """
        if not self.__is_movie_in_dataset(video, DatasetConfig.ALL_SCRAPED_MOVIES):
            print(video.captions.all)
            caption = video.captions.get("pl")  # a.pl -> autogenereted polish subtitles
            print(type(caption))
            if caption:
                text = self.__clear_captions(caption)
                self.__add_to_config_database(video)
                self.__save_video(video, text)
            else:
                print(f"Brak napisów w filmie :{video.title}")
                if not self.__is_movie_in_dataset(video, DatasetConfig.TO_WHISPE_R):
                    with open(DatasetConfig.TO_WHISPE_R, "a", encoding="utf-8") as f:
                        json.dump(
                            {"title": video.title, "url": video.watch_url},
                            f,
                            ensure_ascii=False,
                        )
                        f.write("\n")
                else:
                    print("BRAK NAPISÓW ALE FILM JUŻ ZAPISANY")
        else:
            print("Film znajduje się już w bazie")

    def get_captions(self) -> None:
        """
        Get captions from Youtube video that are not autogenerate in case if it is auto generated save url to this video in jsonlines file.
        :return: None.
        """
        if self.is_playlist:
            movies = Playlist(self.url)
            for video in movies.videos:
                if not self.__is_movie_in_dataset(
                    video, DatasetConfig.ALL_SCRAPED_MOVIES
                ):
                    self.__scrap_captions(video)
                    time.sleep(3)
        else:
            video = YouTube(self.url)
            self.__scrap_captions(video)


if __name__ == "__main__":
    yt = YoutubeCaptions(
        "https://www.youtube.com/watch?v=4el6qQ40BQw", is_playlist=False
    )
    yt.get_captions()
